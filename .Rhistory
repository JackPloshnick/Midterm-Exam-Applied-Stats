setMethod("integrateIt", "input",
function(object){
if(object@test== "Trap"){
Trap= new("Trapezoid", x= object@x_values, y= object@y_values, estimate=
trap(object@x_values, object@y_values, object@start_end_values))
print(Trap)
}
})
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
integrateIt(tester)
setMethod("integrateIt", "input",
function(object){
Trap= new("Trapezoid", x= object@x_values, y= object@y_values, estimate=
trap(object@x_values, object@y_values, object@start_end_values))
print(Trap)
})
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
integrateIt(tester)
setClass(Class="input",  #Sets S4 class of door
representation = representation(
x = "numeric", # three slots as specified in problem set
y = "numeric",
start_end_values = "numeric",
test= "character"
),
prototype = prototype(
x = c(), #default values are empty
y = c(),
start_end_values = c(),
test= c()
)
)
setClass(Class="input",  #Sets S4 class of door
representation = representation(
x = "numeric", # three slots as specified in problem set
y = "numeric",
start_end_values = "numeric",
test= "character"
),
prototype = prototype(
x = c(), #default values are empty
y = c(),
start_end_values = c(),
test= c()
)
)
setValidity("input", function(object){
valuesLength= (length(object@x)== length(object@y))
if(!valuesLength){
return("Simpson not valid")
}
})
x.test<- c(1,2,3,4,5)
y.test<- c(1,4,9,16,25)
tester<- new("input", x= x.test, y_values= y.test,start_end_values= StartToEnd, test= "Trap")
tester<- new("input", x= x.test, y= y.test,start_end_values= StartToEnd, test= "Trap")
setMethod("initialize", "input", function(.Object, ...) { #initilize method
value = callNextMethod()
validObject(value)
return(value)
})
setGeneric("integrateIt", #sets generic function in S4
function(object= "input") {
standardGeneric("integrateIt")
} )
setMethod("integrateIt", "input",
function(object){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
})
tester<- new("input", x= x.test, y= y.test, start_end_values= StartToEnd, test= "Trap")
integrateIt(tester)
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)}
if(test= "Simpson"){
Simpson= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Trap)}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)}
if(test= "Simpson"){
Simpson= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpson)}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
}
if(test= "Simpson"){
Simpson= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpson)
}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
}
if(test= "Simpson"){
Simpsons= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpsons)
}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
}
if(test= "Simpson"){
Simpsons= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpsons)
}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
}
if(test= "S"){
Simpsons= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpsons)
}
})
setGeneric("integrateIt", #sets generic function in S4
function(object= "input") {
standardGeneric("integrateIt")
} )
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
}
if(test= "Simpson"){
Simpson= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpson)
}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)}
if(test= "Simpson"){
Simpson= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpson)}
})
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)}
else{
Simpson= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpson)}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
}
})
setMethod("integrateIt", "input",
function(object){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
result= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
}
print(result)
})
source('~/GitHub/PS5/Trapezoid.R')
setGeneric("integrateIt", #sets generic function in S4
function(object= "input") {
standardGeneric("integrateIt")
} )
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
result= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
}
print(result)
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
result= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
result= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
}
} )
setMethod("integrateIt", "input",
function(object){
if(test="Trap"){ #if cardoor and chosen door are the same, randomly choose between the two remaining doors
result= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
}
} )
source('~/GitHub/PS5/Trapezoid.R')
install.packages(c("httr", "jsonlite", "lubridate"))
library(httr)
library(jsonlite)
library(lubridate)
options(stringsAsFactors = FALSE)
url <- " https://www.predictit.org/api/marketdata/all/"
path <- "eurlex/directory_code"
raw.results <- GET(url = url, path=path)
url <- "https://www.predictit.org/api/marketdata/all/"
path <- "eurlex/directory_code"
raw.results <- GET(url = url, path=path)
names(raw.results)
raw.results$status_code
this.raw.content <- rawToChar(raw.results$content)
this.raw.content
nchar(this.raw.content)
substr(this.raw.content, 1, 100)
this.content <- fromJSON(this.raw.content)
this.raw.content <- rawToChar(raw.results$content)
nchar(this.raw.content)
substr(this.raw.content, 1, 100)
this.content <- fromJSON(this.raw.content)
this.content.df <- do.call(what = "rbind",
args = lapply(this.content, as.data.frame))
this.content <- fromJSON(this.raw.content)
substr(this.raw.content, 1, 100)
this.content.df <- do.call(what = "rbind",
args = lapply(this.raw.content, as.data.frame))
View(this.content.df)
View(this.content.df)
url <- "https://www.predictit.org/api/marketdata/all/"
path <- "eurlex/directory_code"
raw.results <- GET(url = url, path=path)
names(raw.results)
this.raw.content <- rawToChar(raw.results$content)
nchar(this.raw.content)
substr(this.raw.content, 1, 100)
this.content <- fromJSON(this.raw.content)
?fromJSON
this.raw.content<- gsub("!", this.raw.content)
this.raw.content<- gsub("!","", this.raw.content)
nchar(this.raw.content)
substr(this.raw.content, 1, 100)
this.content <- fromJSON(this.raw.content)
readlines <- readLines(this.raw.content, warn = FALSE)
library(httr)
library(jsonlite)
library(lubridate)
options(stringsAsFactors = FALSE)
url <- "https://www.predictit.org/api/marketdata/all/"
path <- "eurlex/directory_code"
raw.results <- GET(url = url, path=path)
names(raw.results)
this.raw.content <- rawToChar(raw.results$content)
readlines <- readLines(this.raw.content, warn = FALSE)
json_file <- stream_in(file("this.raw.content"))
?stream_in
library(httr)
query<- "https://www.predictit.org/api/marketdata/category/6"
out<- GET(url= query)
http_status(out)
data <- content(out)
data
data$Markets
query<- "https://www.predictit.org/api/marketdata/ticker/424.TRUMPAPPR.030918/"
out<- GET(url= query)
http_status(out)
data <- content(out)
data$Markets
data$ID
data$Name
data$Contracts
as.df(data$Contracts)
as.data.frame(data$Contracts)
as.table(data$Contracts)
as.table(data)
as.data.frame(data)
(data)
data$Contracts[[1]]$BestBuyYesCost
query<- "https://www.predictit.org/api/marketdata/ticker/424.TRUMPAPPR.030918/"
out<- GET(url= query)
http_status(out)
data <- content(out)
data$Contracts[[1]]$BestBuyYesCost
data
data$TimeStamp
query<- "https://www.predictit.org/api/marketdata/ticker/424.TRUMPAPPR.030918/"
query<- "https://www.predictit.org/api/marketdata/ticker/424.TRUMPAPPR.030918/"
out<- GET(url= query)
http_status(out)
data <- content(out)
data
data$TimeStamp
data
query<- "https://www.predictit.org/api/marketdata/ticker/424.TRUMPAPPR.030918/"
out<- GET(url= query)
http_status(out)
data <- content(out)
data
setClass(Class="Contract",  #Sets S4 class of Trapezoid
representation = representation(
ShortName = "character", # three slots as specified in problem set
LongName = "character",
Status = "character",
Last_price= "numeric",
best_buy_yes_price= "numeric",
best_buy_no_price= "numeric",
best_sell_yes_price= "numeric",
best_sell_no_price= "numeric",
last_close_price= "numeric"
),
prototype = prototype(
ShortName = c(), # three slots as specified in problem set
LongName = c(),
Status = c(),
Last_price= c(),
best_buy_yes_price= c(),
best_buy_no_price= c(),
best_sell_yes_price= c(),
best_sell_no_price= c(),
last_close_price= c()
)
)
data
test <- new("Contract",  ShortName = data$Contracts[[5]]$ShortName,  LongName =data$Contracts[[5]]$LongName,
Status = data$Contracts[[5]]$Status, Last_price= data$Contracts[[5]]$LastTradePrice,
best_buy_yes_price=data$Contracts[[5]]$BestBuyYesCost,  best_buy_no_price=data$Contracts[[5]]$BestBuyNoCost,
best_sell_yes_price=data$Contracts[[5]]$BestSellYesCost, best_sell_no_price=data$Contracts[[5]]$BestSellNoCost,
last_close_price=data$Contracts[[5]]$LastClosePrice)
data
test <- new("Contract",  ShortName = data$Contracts[[1]]$ShortName,  LongName =data$Contracts[[1]]$LongName,
Status = data$Contracts[[1]]$Status, Last_price= data$Contracts[[1]]$LastTradePrice,
best_buy_yes_price=data$Contracts[[1]]$BestBuyYesCost,  best_buy_no_price=data$Contracts[[1]]$BestBuyNoCost,
best_sell_yes_price=data$Contracts[[1]]$BestSellYesCost, best_sell_no_price=data$Contracts[[1]]$BestSellNoCost,
last_close_price=data$Contracts[[1]]$LastClosePrice)
test
setMethod("initialize", "Contract", function(.Object, ...) { #initilize method
value = callNextMethod()
validObject(value)
return(value)
})
if(Contract@best_sell_no_price < .3){
print("we gonna make some money")
}
if(test@best_sell_no_price < .3){
print("we gonna make some money")
}
if(test@best_sell_no_price < .3){
print("we gonna make some money")
}
if(test@best_sell_no_price < .3){
print("we gonna make some money")
}}
tester<-function(contract){
if(test@best_sell_no_price < .3){
print("we gonna make some money")
}
}
tester<- function(contract){
if(test@best_sell_no_price < .3){
return("we gonna make some money")
}
}
tester<- function(contract){
if(contract@best_sell_no_price <.3){
return("make money")
}
}
function(contract){
if(contract@best_sell_no_price <.3){
return("make money")
}
}
tester
tester(test)
tester(test)
data
test <- new("Contract",  ShortName = data$Contracts[[1]]$ShortName,  LongName =data$Contracts[[1]]$LongName,
Status = data$Contracts[[1]]$Status, Last_price= data$Contracts[[1]]$LastTradePrice,
best_buy_yes_price=data$Contracts[[1]]$BestBuyYesCost,  best_buy_no_price=data$Contracts[[1]]$BestBuyNoCost,
best_sell_yes_price=data$Contracts[[1]]$BestSellYesCost, best_sell_no_price=data$Contracts[[1]]$BestSellNoCost,
last_close_price=data$Contracts[[1]]$LastClosePrice)
test
tester<- function(contract){
if(contract@best_sell_no_price <.3){
return("make money")
}
}
tester(test)
tester<- function(contract){
if(contract@best_sell_no_price >.3){
return("make money")
}
}
tester(test)
?httr
library(httr)
?httr
a= c(1,2,3,4,5,4,3,2,1) #difficulty
y_j= C(0,1,0,1,1,1,0,0,1) #answer. 1 is correct. 0 is incorrect
y_j = C(0,1,0,1,1,1,0,0,1) #answer. 1 is correct. 0 is incorrect
y.j = C(0,1,0,1,1,1,0,0,1) #answer. 1 is correct. 0 is incorrect
y.j= C(0,1,0,0,1,1,1,0,0) #answer. 1 is correct. 0 is incorrect
y= C(0,1,0,0,1,1,1,0,0) #answer. 1 is correct. 0 is incorrect
y= C(0,1,0,0,4,1,1,0,0) #answer. 1 is correct. 0 is incorrect
a= c(1,2,3,4,5,4,3,2,1) #difficulty
myFunction<- function(raschObj, theta){
f=Probability(raschObj,theta)[[2]]
return(f)
}
Probability<- function(raschObj, theta){
PQ= vector(mode="numeric", length= length(test@y_j_value)) #creates blank PQ vector
P= vector(mode="numeric", length= length(test@y_j_value)) #creates blank P vector
for(i in 1:length(raschObj@y_j_value)){ #this loop calculates the P values
P.i.j= (exp(theta - raschObj@a_value[i]))/(1+exp(theta - raschObj@a_value[i])) #formula from paper
P[i]= P.i.j}
for(i in 1:length(raschObj@y_j_value)){#this loop calculates PQ values
if(raschObj@ y_j_value[i]==1){#if y==1, use P.i.j value
P.i.j= (exp(theta - raschObj@a_value[i]))/(1+exp(theta - raschObj@a_value[i]))
PQ[i]<- P.i.j # P
}
if(raschObj@ y_j_value[i]==0){ #if y==0, use 1- p.i.j value
P.i.j= (exp(theta - raschObj@a_value[i]))/(1+exp(theta - raschObj@a_value[i]))
PQ[i]<- 1-P.i.j # Q
}
}
return(list(P, PQ)) #this returns both vectors
}
library(devtools)
library(roxygen2)
current.code <- as.package("Midterm")
setwd("~/GitHub/Midterm-Exam-Applied-Stats")
current.code <- as.package("Midterm")
load_all(current.code)
myFunction<- function(raschObj, theta){
f=Probability(raschObj,theta)[[2]]
return(f)
a= c(1,2,3,4,5,4,3,2,1) #difficulty
y= c(1,1,0,0,0,0,1,1,1) #answer. 1 is correct. 0 is incorrect
test<- new('Rasch', name= "Steve", a_value= a, y_j_value= y  )
myFunction<- function(raschObj, theta){
if(raschObj@y_j_value[i]==1){#if y==1, use P.i.j value
P_Q_values[i] = P_Q_values[i]^(raschObj@y_j_value[i])
}
if(raschObj@y_j_value[i]==0){ #if y==0, use 1- p.i.j value
P_Q_values[i] = P_Q_values[i]^(1-raschObj@y_j_value[i])
}
}
P_Q_values = Probability(raschObj,theta)[[2]] #This gets the PQ values from Probability function
myFunction<- function(raschObj, theta){
if(raschObj@y_j_value[i]==1){#if y==1, use P.i.j value
P_Q_values[i] = P_Q_values[i]^(raschObj@y_j_value[i])
}
if(raschObj@y_j_value[i]==0){ #if y==0, use 1- p.i.j value
P_Q_values[i] = P_Q_values[i]^(1-raschObj@y_j_value[i])
}
}
sapply(P_Q_values, myFunction)
s= sapply(P_Q_values, myFunction)
s
P_Q_values
test<- new('Rasch', name= "Steve", a_value= a, y_j_value= y  )
a= c(1,2,3,4,5,4,3,2,1) #difficulty
y= c(1,1,0,0,0,0,1,1,1) #answer. 1 is correct. 0 is incorrect
test<- new('Rasch', name= "Steve", a_value= a, y_j_value= y  )
test
